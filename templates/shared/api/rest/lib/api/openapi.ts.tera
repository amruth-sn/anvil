{% if api_config_include_openapi %}// OpenAPI 3.0 specification for the REST API
export const openApiSpec = {
  openapi: '3.0.0',
  info: {
    title: '{{ project_name | default(value="API") }}',
    description: '{{ project_description | default(value="REST API for the application") }}',
    version: '1.0.0',
    contact: {
      name: '{{ author_name | default(value="API Team") }}',
      {% if domain %}url: 'https://{{ domain }}',{% endif %}
    },
  },
  {% if domain %}servers: [
    {
      url: 'https://{{ domain }}/api',
      description: 'Production server',
    },
    {
      url: 'http://localhost:3000/api',
      description: 'Development server',
    },
  ],{% else %}servers: [
    {
      url: '/api',
      description: 'API server',
    },
  ],{% endif %}
  paths: {
    '/users': {
      get: {
        summary: 'Get all users',
        description: 'Retrieve a paginated list of users with optional search functionality.',
        parameters: [
          {
            name: 'page',
            in: 'query',
            description: 'Page number for pagination',
            required: false,
            schema: {
              type: 'integer',
              minimum: 1,
              default: 1,
            },
          },
          {
            name: 'limit',
            in: 'query',
            description: 'Number of items per page',
            required: false,
            schema: {
              type: 'integer',
              minimum: 1,
              maximum: 100,
              default: 10,
            },
          },
          {
            name: 'search',
            in: 'query',
            description: 'Search term to filter users',
            required: false,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Successfully retrieved users',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                      example: true,
                    },
                    data: {
                      type: 'array',
                      items: {
                        $ref: '#/components/schemas/User',
                      },
                    },
                    pagination: {
                      $ref: '#/components/schemas/Pagination',
                    },
                  },
                },
              },
            },
          },
          '500': {
            $ref: '#/components/responses/ServerError',
          },
        },
        tags: ['Users'],
      },
      post: {
        summary: 'Create a new user',
        description: 'Create a new user with the provided information.',
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateUser',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'User created successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                      example: true,
                    },
                    data: {
                      $ref: '#/components/schemas/User',
                    },
                    message: {
                      type: 'string',
                      example: 'User created successfully',
                    },
                  },
                },
              },
            },
          },
          '400': {
            $ref: '#/components/responses/ValidationError',
          },
          '500': {
            $ref: '#/components/responses/ServerError',
          },
        },
        tags: ['Users'],
      },
    },
    '/users/{id}': {
      get: {
        summary: 'Get a user by ID',
        description: 'Retrieve a specific user by their unique identifier.',
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'Unique identifier of the user',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'User retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                      example: true,
                    },
                    data: {
                      $ref: '#/components/schemas/User',
                    },
                  },
                },
              },
            },
          },
          '404': {
            $ref: '#/components/responses/NotFound',
          },
          '500': {
            $ref: '#/components/responses/ServerError',
          },
        },
        tags: ['Users'],
      },
      put: {
        summary: 'Update a user',
        description: 'Update an existing user with new information.',
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'Unique identifier of the user',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateUser',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'User updated successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                      example: true,
                    },
                    data: {
                      $ref: '#/components/schemas/User',
                    },
                    message: {
                      type: 'string',
                      example: 'User updated successfully',
                    },
                  },
                },
              },
            },
          },
          '400': {
            $ref: '#/components/responses/ValidationError',
          },
          '404': {
            $ref: '#/components/responses/NotFound',
          },
          '500': {
            $ref: '#/components/responses/ServerError',
          },
        },
        tags: ['Users'],
      },
      delete: {
        summary: 'Delete a user',
        description: 'Delete an existing user permanently.',
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'Unique identifier of the user',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'User deleted successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                      example: true,
                    },
                    message: {
                      type: 'string',
                      example: 'User deleted successfully',
                    },
                  },
                },
              },
            },
          },
          '404': {
            $ref: '#/components/responses/NotFound',
          },
          '500': {
            $ref: '#/components/responses/ServerError',
          },
        },
        tags: ['Users'],
      },
    },
  },
  components: {
    schemas: {
      User: {
        type: 'object',
        required: ['id', 'name', 'email', 'createdAt'],
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier for the user',
            example: 'user-123',
          },
          name: {
            type: 'string',
            description: 'Full name of the user',
            minLength: 1,
            maxLength: 100,
            example: 'John Doe',
          },
          email: {
            type: 'string',
            format: 'email',
            description: 'Email address of the user',
            example: 'john@example.com',
          },
          createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the user was created',
            example: '2023-01-01T00:00:00.000Z',
          },
          updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the user was last updated',
            example: '2023-01-01T00:00:00.000Z',
          },
        },
      },
      CreateUser: {
        type: 'object',
        required: ['name', 'email'],
        properties: {
          name: {
            type: 'string',
            description: 'Full name of the user',
            minLength: 1,
            maxLength: 100,
            example: 'John Doe',
          },
          email: {
            type: 'string',
            format: 'email',
            description: 'Email address of the user',
            example: 'john@example.com',
          },
        },
      },
      UpdateUser: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
            description: 'Full name of the user',
            minLength: 1,
            maxLength: 100,
            example: 'John Doe',
          },
          email: {
            type: 'string',
            format: 'email',
            description: 'Email address of the user',
            example: 'john@example.com',
          },
        },
      },
      Pagination: {
        type: 'object',
        properties: {
          page: {
            type: 'integer',
            minimum: 1,
            description: 'Current page number',
            example: 1,
          },
          limit: {
            type: 'integer',
            minimum: 1,
            maximum: 100,
            description: 'Number of items per page',
            example: 10,
          },
          total: {
            type: 'integer',
            minimum: 0,
            description: 'Total number of items',
            example: 50,
          },
          totalPages: {
            type: 'integer',
            minimum: 0,
            description: 'Total number of pages',
            example: 5,
          },
        },
      },
      Error: {
        type: 'object',
        required: ['success', 'error'],
        properties: {
          success: {
            type: 'boolean',
            example: false,
          },
          error: {
            type: 'string',
            description: 'Error type or code',
            example: 'Validation failed',
          },
          message: {
            type: 'string',
            description: 'Human-readable error message',
            example: 'The request body contains invalid data',
          },
          details: {
            type: 'array',
            description: 'Detailed error information',
            items: {
              type: 'object',
              properties: {
                code: {
                  type: 'string',
                  example: 'invalid_type',
                },
                message: {
                  type: 'string',
                  example: 'Expected string, received number',
                },
                path: {
                  type: 'array',
                  items: {
                    oneOf: [
                      { type: 'string' },
                      { type: 'number' },
                    ],
                  },
                  example: ['name'],
                },
              },
            },
          },
        },
      },
    },
    responses: {
      ValidationError: {
        description: 'Request validation failed',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error',
            },
            example: {
              success: false,
              error: 'Validation failed',
              message: 'Request body validation failed',
              details: [
                {
                  code: 'invalid_type',
                  message: 'Expected string, received number',
                  path: ['name'],
                },
              ],
            },
          },
        },
      },
      NotFound: {
        description: 'Resource not found',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error',
            },
            example: {
              success: false,
              error: 'Not found',
              message: 'The requested resource was not found',
            },
          },
        },
      },
      ServerError: {
        description: 'Internal server error',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error',
            },
            example: {
              success: false,
              error: 'Internal server error',
              message: 'Something went wrong',
            },
          },
        },
      },
    },
  },
  tags: [
    {
      name: 'Users',
      description: 'User management operations',
    },
  ],
};{% else %}// OpenAPI is not enabled for this configuration
export const openApiSpec = {
  openapi: '3.0.0',
  info: {
    title: '{{ project_name | default(value="API") }}',
    description: 'OpenAPI documentation is not enabled. Set include_openapi: true to enable it.',
    version: '1.0.0',
  },
  paths: {},
};{% endif %}