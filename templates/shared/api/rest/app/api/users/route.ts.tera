import { NextRequest, NextResponse } from 'next/server';
{% if api_config_include_validation %}import { z } from 'zod';
import { UserSchema, CreateUserSchema } from '@/lib/api/schemas';{% endif %}
{% if api_config_cors_enabled %}import { corsMiddleware } from '@/lib/api/middleware';{% endif %}

// GET /api/users - Get all users
export async function GET(request: NextRequest) {
  try {
    {% if api_config_cors_enabled %}// Apply CORS
    const corsResponse = await corsMiddleware(request);
    if (corsResponse) return corsResponse;
    {% endif %}

    // TODO: Replace with your actual data fetching logic
    const users = [
      { id: '1', name: 'John Doe', email: 'john@example.com', createdAt: new Date().toISOString() },
      { id: '2', name: 'Jane Smith', email: 'jane@example.com', createdAt: new Date().toISOString() },
    ];

    {% if api_config_include_validation %}// Validate response data
    const validatedUsers = users.map(user => UserSchema.parse(user));
    
    return NextResponse.json({
      success: true,
      data: validatedUsers,
      pagination: {
        page: 1,
        limit: 10,
        total: validatedUsers.length,
      },
    });{% else %}return NextResponse.json({
      success: true,
      data: users,
      pagination: {
        page: 1,
        limit: 10,
        total: users.length,
      },
    });{% endif %}
  } catch (error) {
    console.error('GET /api/users error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to fetch users',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

// POST /api/users - Create a new user
export async function POST(request: NextRequest) {
  try {
    {% if api_config_cors_enabled %}// Apply CORS
    const corsResponse = await corsMiddleware(request);
    if (corsResponse) return corsResponse;
    {% endif %}

    const body = await request.json();
    
    {% if api_config_include_validation %}// Validate request body
    const validatedData = CreateUserSchema.parse(body);
    
    // TODO: Replace with your actual user creation logic
    const newUser = {
      id: Math.random().toString(36).substr(2, 9),
      ...validatedData,
      createdAt: new Date().toISOString(),
    };
    
    // Validate response
    const validatedUser = UserSchema.parse(newUser);
    
    return NextResponse.json({
      success: true,
      data: validatedUser,
      message: 'User created successfully',
    }, { status: 201 });{% else %}// TODO: Replace with your actual user creation logic
    const newUser = {
      id: Math.random().toString(36).substr(2, 9),
      ...body,
      createdAt: new Date().toISOString(),
    };
    
    return NextResponse.json({
      success: true,
      data: newUser,
      message: 'User created successfully',
    }, { status: 201 });{% endif %}
  } catch (error) {
    console.error('POST /api/users error:', error);
    
    {% if api_config_include_validation %}if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          success: false,
          error: 'Validation failed',
          details: error.errors,
        },
        { status: 400 }
      );
    }
    {% endif %}

    return NextResponse.json(
      {
        success: false,
        error: 'Failed to create user',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}