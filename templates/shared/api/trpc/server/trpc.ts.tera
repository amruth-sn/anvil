import { initTRPC, TRPCError } from '@trpc/server';
import { type CreateNextContextOptions } from '@trpc/server/adapters/next';
import { type NextRequest } from 'next/server';
import superjson from 'superjson';
import { ZodError } from 'zod';
{% if api_config_include_auth_context %}// Import your auth solution here
// import { getServerSession } from 'next-auth';
// import { authOptions } from '@/lib/auth';{% endif %}

// Context creation
interface CreateContextOptions {
  req: NextRequest;
{% if api_config_include_auth_context %}  user?: {
    id: string;
    email: string;
    name: string;
  } | null;{% endif %}
}

export async function createTRPCContext(
  opts: CreateNextContextOptions | { req: NextRequest }
): Promise<CreateContextOptions> {
{% if api_config_include_auth_context %}  // Get user session from your auth provider
  // TODO: Replace with your actual auth logic
  // const session = await getServerSession(authOptions);
  // const user = session?.user ?? null;
  
  // Placeholder user for demo purposes
  const authHeader = opts.req.headers.get('authorization');
  const user = authHeader ? {
    id: 'user-123',
    email: 'user@example.com',
    name: 'Demo User',
  } : null;
  
  return {
    req: opts.req,
    user,
  };{% else %}  return {
    req: opts.req,
  };{% endif %}
}

type Context = Awaited<ReturnType<typeof createTRPCContext>>;

// Initialize tRPC
const t = initTRPC.context<Context>().create({
  transformer: superjson,
  errorFormatter({ shape, error }) {
    return {
      ...shape,
      data: {
        ...shape.data,
        zodError:
          error.cause instanceof ZodError ? error.cause.flatten() : null,
      },
    };
  },
});

// Base router and procedure helpers
export const createTRPCRouter = t.router;
export const publicProcedure = t.procedure;

{% if api_config_include_middleware %}// Logging middleware
const loggingMiddleware = t.middleware(async ({ path, type, next }) => {
  const start = Date.now();
  const result = await next();
  const durationMs = Date.now() - start;
  
  if (result.ok) {
    console.log(`✅ ${type} ${path} - ${durationMs}ms`);
  } else {
    console.error(`❌ ${type} ${path} - ${durationMs}ms - ${result.error.message}`);
  }
  
  return result;
});

// Rate limiting middleware (basic implementation)
const rateLimitStore = new Map<string, { count: number; resetTime: number }>();
const RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute
const RATE_LIMIT_MAX_REQUESTS = 100;

const rateLimitMiddleware = t.middleware(async ({ ctx, next }) => {
  const ip = ctx.req.headers.get('x-forwarded-for') || 'unknown';
  const now = Date.now();
  const key = `rate_limit:${ip}`;
  
  // Clean up old entries
  for (const [k, v] of rateLimitStore.entries()) {
    if (v.resetTime < now) {
      rateLimitStore.delete(k);
    }
  }
  
  const current = rateLimitStore.get(key);
  
  if (current) {
    if (current.resetTime > now) {
      if (current.count >= RATE_LIMIT_MAX_REQUESTS) {
        throw new TRPCError({
          code: 'TOO_MANY_REQUESTS',
          message: `Rate limit exceeded. Try again in ${Math.ceil((current.resetTime - now) / 1000)} seconds.`,
        });
      }
      current.count++;
    } else {
      current.count = 1;
      current.resetTime = now + RATE_LIMIT_WINDOW;
    }
  } else {
    rateLimitStore.set(key, {
      count: 1,
      resetTime: now + RATE_LIMIT_WINDOW,
    });
  }
  
  return next();
});

// Public procedure with middleware
export const publicProcedureWithMiddleware = publicProcedure
  .use(loggingMiddleware)
  .use(rateLimitMiddleware);{% else %}export const publicProcedureWithMiddleware = publicProcedure;{% endif %}

{% if api_config_include_auth_context %}// Authentication middleware
const enforceAuth = t.middleware(({ ctx, next }) => {
  if (!ctx.user) {
    throw new TRPCError({
      code: 'UNAUTHORIZED',
      message: 'Authentication required',
    });
  }
  return next({
    ctx: {
      ...ctx,
      user: ctx.user,
    },
  });
});

// Protected procedure for authenticated users
export const protectedProcedure = {% if api_config_include_middleware %}publicProcedureWithMiddleware{% else %}publicProcedure{% endif %}.use(enforceAuth);{% endif %}

// Export types
export type AppRouter = typeof import('./routers/_app').appRouter;