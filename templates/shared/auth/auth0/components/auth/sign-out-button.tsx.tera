'use client'

import { signOut, useSession } from "next-auth/react"
import { useState } from "react"

interface SignOutButtonProps {
  className?: string
  children?: React.ReactNode
  callbackUrl?: string
}

export function SignOutButton({ 
  className = "px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors",
  children = "Sign Out",
  callbackUrl = "/"
}: SignOutButtonProps) {
  const { data: session, status } = useSession()
  const [isLoading, setIsLoading] = useState(false)

  if (status === "loading") {
    return (
      <button disabled className={className}>
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
          <span>Loading...</span>
        </div>
      </button>
    )
  }

  if (!session) {
    return null // User is not signed in
  }

  const handleSignOut = async () => {
    setIsLoading(true)
    try {
      await signOut({ callbackUrl })
    } catch (error) {
      console.error("Sign out error:", error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <button
      onClick={handleSignOut}
      disabled={isLoading}
      className={className}
    >
      {isLoading ? (
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
          <span>Signing out...</span>
        </div>
      ) : (
        children
      )}
    </button>
  )
}

// Simple text sign out link
export function SignOutLink({ 
  className = "text-red-600 hover:text-red-800 underline",
  children = "Sign out",
  callbackUrl = "/"
}: SignOutButtonProps) {
  const { data: session } = useSession()
  const [isLoading, setIsLoading] = useState(false)

  if (!session) {
    return null
  }

  const handleSignOut = async (e: React.MouseEvent) => {
    e.preventDefault()
    setIsLoading(true)
    try {
      await signOut({ callbackUrl })
    } catch (error) {
      console.error("Sign out error:", error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <a
      href="#"
      onClick={handleSignOut}
      className={className}
    >
      {isLoading ? "Signing out..." : children}
    </a>
  )
}