import { NextAuthConfig } from "next-auth"
import Auth0Provider from "next-auth/providers/auth0"

export const authConfig: NextAuthConfig = {
  
  providers: [
    Auth0Provider({
      clientId: process.env.AUTH0_CLIENT_ID!,
      clientSecret: process.env.AUTH0_CLIENT_SECRET!,
      issuer: process.env.AUTH0_ISSUER!,
      authorization: {
        params: {
          scope: "openid email profile",
        },
      },
    }),
  ],

  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },

  pages: {
    signIn: "/auth/signin",
    signOut: "/auth/signout",
    error: "/auth/error",
  },

  callbacks: {
    async jwt({ token, user, account, profile }) {
      // Persist the OAuth access_token and or the user id to the token right after signin
      if (account) {
        token.accessToken = account.access_token
        token.idToken = account.id_token
      }

      // Add role and permissions to token (optional - configure in Auth0)
      if (user && profile) {
        const auth0User = profile as any
        const domain = process.env.AUTH0_ISSUER?.replace('https://', '') || 'your-domain.auth0.com'
        token.role = auth0User?.[`https://${domain}/roles`]?.[0] || "user"
        token.permissions = auth0User?.[`https://${domain}/permissions`] || []
      }

      return token
    },

    async session({ session, token, user }) {
      // Send properties to the client
      if (token) {
        session.accessToken = token.accessToken as string
        session.user.role = token.role as string
        session.user.permissions = token.permissions as string[]
      }

      return session
    },

    async signIn({ user, account, profile, email, credentials }) {
      // Control who can sign in
      // Add your custom sign-in logic here
      // Example: domain restrictions, user allowlisting, etc.
      
      return true
    },

    async redirect({ url, baseUrl }) {
      // Allows relative callback URLs
      if (url.startsWith("/")) return `${baseUrl}${url}`
      // Allows callback URLs on the same origin
      else if (new URL(url).origin === baseUrl) return url
      return baseUrl
    },
  },

  events: {
    async signIn({ user, account, profile, isNewUser }) {
      console.log("User signed in:", user.email)
      
      // Handle new user registration
      if (isNewUser) {
        console.log("New user registered:", user.email)
        // You can add custom logic here for new user setup
        // await createUserProfile(user)
        // await sendWelcomeEmail(user.email)
      }
    },

    async signOut({ session, token }) {
      console.log("User signed out")
      // Add custom signout logic here
    },
  },

  debug: process.env.NODE_ENV === "development",
}

// Extend the default session type
declare module "next-auth" {
  interface Session {
    accessToken?: string
    user: {
      id: string
      name?: string | null
      email?: string | null
      image?: string | null
      role?: string
      permissions?: string[]
    }
  }

  interface User {
    role?: string
    permissions?: string[]
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    accessToken?: string
    idToken?: string
    role?: string
    permissions?: string[]
  }
}