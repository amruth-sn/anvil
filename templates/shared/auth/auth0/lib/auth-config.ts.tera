import { NextAuthConfig } from "next-auth"
import Auth0Provider from "next-auth/providers/auth0"
{% if auth_config_enable_database_adapter %}
import { PrismaAdapter } from "@auth/prisma-adapter"
import { prisma } from "@/lib/prisma"
{% endif %}

export const authConfig: NextAuthConfig = {
  {% if auth_config_enable_database_adapter %}
  adapter: PrismaAdapter(prisma),
  {% endif %}
  
  providers: [
    Auth0Provider({
      clientId: process.env.AUTH0_CLIENT_ID!,
      clientSecret: process.env.AUTH0_CLIENT_SECRET!,
      issuer: process.env.AUTH0_ISSUER!,
      authorization: {
        params: {
          scope: "openid email profile{% if auth_config_enable_role_management %} read:user_idp_tokens{% endif %}",
        },
      },
    }),
  ],

  {% if auth_config_session_strategy == "jwt" %}
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  {% else %}
  session: {
    strategy: "database",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  {% endif %}

  pages: {
    signIn: "/auth/signin",
    signOut: "/auth/signout",
    error: "/auth/error",
  },

  callbacks: {
    async jwt({ token, user, account, profile }) {
      // Persist the OAuth access_token and or the user id to the token right after signin
      if (account) {
        token.accessToken = account.access_token
        token.idToken = account.id_token
      }

      {% if auth_config_enable_role_management %}
      // Add role and permissions to token
      if (user) {
        // Extract roles from Auth0 user metadata
        const auth0User = profile as any
        token.role = auth0User?.["https://{{ auth_config_auth0_domain }}/roles"]?.[0] || "user"
        token.permissions = auth0User?.["https://{{ auth_config_auth0_domain }}/permissions"] || []
      }
      {% endif %}

      return token
    },

    async session({ session, token, user }) {
      // Send properties to the client
      if (token) {
        session.accessToken = token.accessToken as string
        {% if auth_config_enable_role_management %}
        session.user.role = token.role as string
        session.user.permissions = token.permissions as string[]
        {% endif %}
      }

      {% if auth_config_enable_database_adapter %}
      // When using database sessions, user data comes from the database
      if (user) {
        session.user.id = user.id
        {% if auth_config_enable_role_management %}
        // You might want to fetch role from your database here
        // session.user.role = await getUserRole(user.id)
        {% endif %}
      }
      {% endif %}

      return session
    },

    async signIn({ user, account, profile, email, credentials }) {
      // Control who can sign in
      {% if auth_config_allowed_domains %}
      const allowedDomains = "{{ auth_config_allowed_domains }}".split(',').map(d => d.trim())
      const userEmail = user.email || email?.email
      
      if (userEmail) {
        const domain = userEmail.split('@')[1]
        if (!allowedDomains.includes(domain)) {
          return false // Reject sign in
        }
      }
      {% endif %}

      return true
    },

    async redirect({ url, baseUrl }) {
      // Allows relative callback URLs
      if (url.startsWith("/")) return `${baseUrl}${url}`
      // Allows callback URLs on the same origin
      else if (new URL(url).origin === baseUrl) return url
      return baseUrl
    },
  },

  events: {
    async signIn({ user, account, profile, isNewUser }) {
      console.log("User signed in:", user.email)
      
      // Handle new user registration
      if (isNewUser) {
        console.log("New user registered:", user.email)
        // You can add custom logic here for new user setup
        // await createUserProfile(user)
        // await sendWelcomeEmail(user.email)
      }
    },

    async signOut({ session, token }) {
      console.log("User signed out")
      // Add custom signout logic here
    },
  },

  debug: process.env.NODE_ENV === "development",
}

// Extend the default session type
declare module "next-auth" {
  interface Session {
    accessToken?: string
    user: {
      id: string
      name?: string | null
      email?: string | null
      image?: string | null
      {% if auth_config_enable_role_management %}
      role?: string
      permissions?: string[]
      {% endif %}
    }
  }

  interface User {
    {% if auth_config_enable_role_management %}
    role?: string
    permissions?: string[]
    {% endif %}
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    accessToken?: string
    idToken?: string
    {% if auth_config_enable_role_management %}
    role?: string
    permissions?: string[]
    {% endif %}
  }
}