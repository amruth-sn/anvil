import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'
import { clerkConfiguration } from './lib/clerk-setup'

// Create route matchers from configuration
const isProtectedRoute = createRouteMatcher(
  clerkConfiguration.protectedRoutes.map(route => `${route}(.*)`)
)

const isPublicRoute = createRouteMatcher(
  clerkConfiguration.publicRoutes
)

export default clerkMiddleware((auth, req) => {
  // Always allow public routes
  if (isPublicRoute(req)) {
    return
  }
  
  // Protect all other routes that match protected patterns
  if (isProtectedRoute(req)) {
    auth().protect()
  }
  
  // Optional: Add custom logic for specific routes
  const url = req.nextUrl
  
  // Redirect to sign-in if accessing protected content while unauthenticated
  if (url.pathname.startsWith('/dashboard') && !auth().userId) {
    const signInUrl = new URL('/sign-in', req.url)
    signInUrl.searchParams.set('redirect_url', url.pathname)
    return Response.redirect(signInUrl)
  }
})

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
}