// Clerk configuration based on user preferences
// Generated by Anvil with service-specific settings

export const clerkConfiguration = {
  // Basic configuration
  appName: "{{ auth_config_app_name | default(value='My SaaS App') }}",
  
  // Social login configuration
  socialLoginEnabled: {{ auth_config_enable_social_login | default(value=true) }},
  
  {% if auth_config_allowed_domains %}
  // Domain restrictions
  allowedDomains: "{{ auth_config_allowed_domains }}".split(',').map(d => d.trim()).filter(d => d.length > 0),
  {% else %}
  // No domain restrictions
  allowedDomains: [],
  {% endif %}
  
  // User metadata fields
  metadataFields: [
    {% if auth_config_user_metadata_fields %}
    {% for field in auth_config_user_metadata_fields %}
    "{{ field }}"{% if not loop.last %},{% endif %}
    {% endfor %}
    {% endif %}
  ],
  
  // Computed properties
  hasMetadataFields: {% if auth_config_user_metadata_fields %}true{% else %}false{% endif %},
  hasDomainRestrictions: {% if auth_config_allowed_domains %}true{% else %}false{% endif %},
  
  // Authentication features
  features: {
    emailPassword: true,
    socialLogin: {{ auth_config_enable_social_login | default(value=true) }},
    phoneNumber: false,
    multiSession: true,
    organizations: false,
  },
  
  // Protected routes configuration
  protectedRoutes: [
    '/dashboard',
    '/profile',
    '/settings',
    '/api/protected'
  ],
  
  // Public routes (always accessible)
  publicRoutes: [
    '/',
    '/about',
    '/contact',
    '/sign-in(.*)',
    '/sign-up(.*)',
    '/api/public(.*)',
    '/api/webhooks(.*)'
  ]
};

// Helper functions for route protection
export function isProtectedRoute(pathname: string): boolean {
  return clerkConfiguration.protectedRoutes.some(route => 
    pathname.startsWith(route)
  );
}

export function isPublicRoute(pathname: string): boolean {
  return clerkConfiguration.publicRoutes.some(route => {
    if (route.includes('(.*)')) {
      const baseRoute = route.replace('(.*)', '');
      return pathname.startsWith(baseRoute);
    }
    return pathname === route;
  });
}

// Setup instructions based on configuration
export const setupInstructions = {
  dashboard: `
üöÄ Clerk Setup Instructions:

1. Go to https://dashboard.clerk.com
2. Create a new application named: "${clerkConfiguration.appName}"
${clerkConfiguration.socialLoginEnabled ? '3. Enable social login providers (Google, GitHub, Discord, etc.)' : '3. Social login is disabled - you can enable it later'}
${clerkConfiguration.hasDomainRestrictions ? `4. Set up domain restrictions for: ${clerkConfiguration.allowedDomains.join(', ')}` : '4. No domain restrictions configured'}
${clerkConfiguration.hasMetadataFields ? `5. Configure user metadata fields: ${clerkConfiguration.metadataFields.join(', ')}` : '5. No additional metadata fields configured'}
6. Copy your API keys and add them to your environment variables
7. Configure your domain settings for production deployment

üîß Additional Configuration:
- Set up webhooks for user events if needed
- Configure session settings and timeout
- Set up organization features if required
- Review security settings and policies
  `,
  
  environment: `
üìÑ Add these environment variables to your .env.local file:

# Clerk Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_your_key_here
CLERK_SECRET_KEY=sk_test_your_secret_here

# Optional: Webhook endpoint secret (if using webhooks)
CLERK_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Optional: Clerk JS Version (defaults to latest)
NEXT_PUBLIC_CLERK_JS_VERSION=5
  `,
  
  webhooks: `
üîó Webhook Configuration (Optional):

If you need to sync user data or trigger actions on user events:

1. In Clerk Dashboard ‚Üí Webhooks
2. Add endpoint: https://yourdomain.com/api/webhooks/clerk
3. Select events: user.created, user.updated, user.deleted
4. Copy the webhook secret to CLERK_WEBHOOK_SECRET
  `,
  
  production: `
üöÄ Production Deployment Checklist:

1. Update environment variables with production keys
2. Set your production domain in Clerk Dashboard
3. Configure allowed origins and redirect URLs
4. Enable/disable features as needed for production
5. Set up proper error pages and fallbacks
6. Review rate limiting and security settings
  `
};

// Export for logging and debugging
if (typeof window === 'undefined') {
  console.log("üîê Clerk Configuration:", clerkConfiguration);
}