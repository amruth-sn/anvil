// Comprehensive project information generated by Anvil
// This file demonstrates the full shared context capabilities

export const projectInfo = {
  // Basic project information
  name: "{{ project_name }}",
  description: "{{ project_description | default(value='A modern application') }}",
  
  // Template metadata
  template: {
    name: "{{ template.name }}",
    description: "{{ template.description }}",
    version: "{{ template.version }}",
    minAnvilVersion: "{{ template.min_anvil_version }}"
  },
  
  // Build information
  build: {
    timestamp: "{{ build.timestamp }}",
    timestampIso: "{{ build.timestamp_iso }}",
    year: "{{ build.year }}",
    generator: "{{ build.generator }}",
    generatorVersion: "{{ build.generator_version }}"
  },
  
  // Service configuration
  services: {
    count: {{ service_count | default(value=0) }},
    hasServices: {{ has_services | default(value=false) }},
    hasAuth: {{ has_any_auth | default(value=false) }},
    hasDatabase: {{ has_any_database | default(value=false) }},
    
    // Active services
    active: [
      {% for service in active_services %}
      {
        category: "{{ service.category }}",
        provider: "{{ service.provider }}",
        hasConfig: {{ service.has_config }}
      }{% if not loop.last %},{% endif %}
      {% endfor %}
    ],
    
    // Service-specific details
    {% if service_auth %}
    auth: {
      provider: "{{ service_auth }}",
      hasAuth: {{ auth_has_auth | default(value=false) }},
      {% if auth_public_auth_key_name %}
      publicKeyEnvVar: "{{ auth_public_auth_key_name }}",
      {% endif %}
    },
    {% endif %}
  },
  
  // Dependencies
  dependencies: {
    hasDependencies: {{ has_dependencies | default(value=false) }},
    {% if merged_dependencies.npm %}
    npm: [
      {% for dep in merged_dependencies.npm %}
      {
        name: "{{ dep.name }}",
        version: "{{ dep.version }}"
      }{% if not loop.last %},{% endif %}
      {% endfor %}
    ],
    {% endif %}
  },
  
  // Environment variables
  environment: {
    hasVariables: {{ has_environment_variables | default(value=false) }},
    {% if environment_variables %}
    variables: {
      {% for var_name, var_value in environment_variables %}
      "{{ var_name }}": "{{ var_value }}"{% if not loop.last %},{% endif %}
      {% endfor %}
    },
    {% endif %}
  },
  
  // Features
  features: {
    enabled: [
      {% for feature in features %}
      "{{ feature }}"{% if not loop.last %},{% endif %}
      {% endfor %}
    ],
    flags: {
      {% for feature in features %}
      {{ feature | snake_case }}: true{% if not loop.last %},{% endif %}
      {% endfor %}
    }
  }
};

// Utility functions for project information
export const getServiceProvider = (category: string) => {
  const service = projectInfo.services.active.find(s => s.category.toLowerCase() === category.toLowerCase());
  return service?.provider || null;
};

export const hasService = (category: string) => {
  return projectInfo.services.active.some(s => s.category.toLowerCase() === category.toLowerCase());
};

export const getFeatureFlag = (feature: string) => {
  return projectInfo.features.enabled.includes(feature);
};

// Debug information
console.log("ðŸ“‹ Project Information:", projectInfo);