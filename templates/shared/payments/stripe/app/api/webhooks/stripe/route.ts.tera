import { NextRequest, NextResponse } from "next/server"
import Stripe from "stripe"

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2023-10-16",
})

const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET!

export async function POST(req: NextRequest) {
  const body = await req.text()
  const sig = req.headers.get("stripe-signature")!

  let event: Stripe.Event

  try {
    event = stripe.webhooks.constructEvent(body, sig, endpointSecret)
  } catch (err) {
    console.error("Webhook signature verification failed:", err)
    return NextResponse.json(
      { error: "Webhook signature verification failed" },
      { status: 400 }
    )
  }

  // Handle the event
  switch (event.type) {
    case "checkout.session.completed":
      const session = event.data.object as Stripe.Checkout.Session
      console.log("Checkout session completed:", session.id)
      
      // Update user's subscription status in your database
      const userId = session.metadata?.userId
      if (userId) {
        // TODO: Update user subscription in database
        console.log(`User ${userId} subscribed successfully`)
      }
      break

    case "invoice.payment_succeeded":
      const invoice = event.data.object as Stripe.Invoice
      console.log("Payment succeeded:", invoice.id)
      
      // Handle successful payment
      // TODO: Update payment history in database
      break

    case "invoice.payment_failed":
      const failedInvoice = event.data.object as Stripe.Invoice
      console.log("Payment failed:", failedInvoice.id)
      
      // Handle failed payment
      // TODO: Notify user and update subscription status
      break

    default:
      console.log(`Unhandled event type ${event.type}`)
  }

  return NextResponse.json({ received: true })
}