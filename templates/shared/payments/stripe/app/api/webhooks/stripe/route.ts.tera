import { NextRequest, NextResponse } from "next/server"
import { headers } from "next/headers"
import Stripe from "stripe"

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2023-10-16",
})

const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!

export async function POST(req: NextRequest) {
  const body = await req.text()
  const signature = headers().get("stripe-signature")!

  let event: Stripe.Event

  try {
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret)
  } catch (err) {
    console.error("Webhook signature verification failed:", err)
    return NextResponse.json(
      { error: "Webhook signature verification failed" },
      { status: 400 }
    )
  }

  console.log(`Received webhook event: ${event.type}`)

  try {
    switch (event.type) {
      case "checkout.session.completed":
        await handleCheckoutSessionCompleted(event.data.object as Stripe.Checkout.Session)
        break

      case "customer.subscription.created":
        await handleSubscriptionCreated(event.data.object as Stripe.Subscription)
        break

      case "customer.subscription.updated":
        await handleSubscriptionUpdated(event.data.object as Stripe.Subscription)
        break

      case "customer.subscription.deleted":
        await handleSubscriptionDeleted(event.data.object as Stripe.Subscription)
        break

      case "invoice.payment_succeeded":
        await handleInvoicePaymentSucceeded(event.data.object as Stripe.Invoice)
        break

      case "invoice.payment_failed":
        await handleInvoicePaymentFailed(event.data.object as Stripe.Invoice)
        break

      case "customer.created":
        await handleCustomerCreated(event.data.object as Stripe.Customer)
        break

      default:
        console.log(`Unhandled event type: ${event.type}`)
    }

    return NextResponse.json({ received: true })
  } catch (error) {
    console.error(`Error handling webhook event ${event.type}:`, error)
    return NextResponse.json(
      { error: "Webhook handler failed" },
      { status: 500 }
    )
  }
}

async function handleCheckoutSessionCompleted(session: Stripe.Checkout.Session) {
  console.log("üí≥ Checkout session completed:", session.id)
  
  try {
    const customerId = session.customer as string
    const subscriptionId = session.subscription as string
    const userId = session.metadata?.userId

    if (session.mode === "subscription" && subscriptionId) {
      console.log("üîÑ Processing subscription checkout for user:", userId)
      // TODO: Update user subscription status in your database
      // await updateUserSubscription(userId, {
      //   customerId,
      //   subscriptionId,
      //   status: 'active'
      // })
    } else if (session.mode === "payment") {
      console.log("üí∞ Processing one-time payment for user:", userId)
      // TODO: Process one-time purchase
      // await processOneTimePayment(userId, session)
    }

    console.log("‚úÖ Checkout session processed successfully")
  } catch (error) {
    console.error("‚ùå Error processing checkout session:", error)
  }
}

async function handleSubscriptionCreated(subscription: Stripe.Subscription) {
  console.log("üÜï Subscription created:", subscription.id)
  
  try {
    // TODO: Create subscription record in database
    // await createUserSubscription({
    //   subscriptionId: subscription.id,
    //   customerId: subscription.customer as string,
    //   status: subscription.status,
    //   priceId: subscription.items.data[0]?.price.id,
    // })

    console.log("‚úÖ Subscription created successfully")
  } catch (error) {
    console.error("‚ùå Error creating subscription:", error)
  }
}

async function handleSubscriptionUpdated(subscription: Stripe.Subscription) {
  console.log("üìù Subscription updated:", subscription.id)
  
  try {
    // TODO: Update subscription in database
    // await updateUserSubscription(subscription.id, {
    //   status: subscription.status,
    //   cancelAtPeriodEnd: subscription.cancel_at_period_end,
    // })

    console.log("‚úÖ Subscription updated successfully")
  } catch (error) {
    console.error("‚ùå Error updating subscription:", error)
  }
}

async function handleSubscriptionDeleted(subscription: Stripe.Subscription) {
  console.log("üóëÔ∏è Subscription deleted:", subscription.id)
  
  try {
    // TODO: Update subscription status and revoke access
    // await updateUserSubscription(subscription.id, {
    //   status: 'cancelled',
    //   cancelledAt: new Date(),
    // })

    console.log("‚úÖ Subscription deletion processed successfully")
  } catch (error) {
    console.error("‚ùå Error processing subscription deletion:", error)
  }
}

async function handleInvoicePaymentSucceeded(invoice: Stripe.Invoice) {
  console.log("üí∞ Invoice payment succeeded:", invoice.id)
  
  try {
    const subscriptionId = invoice.subscription as string
    
    if (subscriptionId) {
      // TODO: Update subscription payment status
      // await updateSubscriptionPayment(subscriptionId, {
      //   lastPaymentDate: new Date(invoice.created * 1000),
      //   amountPaid: invoice.amount_paid,
      // })
    }

    console.log("‚úÖ Invoice payment processed successfully")
  } catch (error) {
    console.error("‚ùå Error processing invoice payment:", error)
  }
}

async function handleInvoicePaymentFailed(invoice: Stripe.Invoice) {
  console.log("‚ùå Invoice payment failed:", invoice.id)
  
  try {
    // TODO: Handle payment failure
    // await handlePaymentFailure(invoice.customer as string, invoice)
    
    console.log("‚úÖ Invoice payment failure processed")
  } catch (error) {
    console.error("‚ùå Error processing invoice payment failure:", error)
  }
}

async function handleCustomerCreated(customer: Stripe.Customer) {
  console.log("üë§ Customer created:", customer.id)
  
  try {
    // TODO: Create customer record in database
    // await createCustomer({
    //   stripeCustomerId: customer.id,
    //   email: customer.email,
    //   name: customer.name,
    // })

    console.log("‚úÖ Customer created successfully")
  } catch (error) {
    console.error("‚ùå Error creating customer:", error)
  }
}