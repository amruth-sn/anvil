name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'web/**'
      - '*.md'
      - 'LICENSE*'
      - '.github/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      new_version: ${{ steps.check.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version from workspace Cargo.toml
          CURRENT=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          
          # Get previous version (from previous commit)
          git checkout HEAD~1 -- Cargo.toml 2>/dev/null || true
          PREVIOUS=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          git checkout HEAD -- Cargo.toml
          
          echo "Previous version: $PREVIOUS"
          echo "Current version: $CURRENT"
          
          if [ "$CURRENT" != "$PREVIOUS" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT" >> $GITHUB_OUTPUT
            echo "✅ Version changed: $PREVIOUS → $CURRENT"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "⏭️ Version unchanged, skipping release"
          fi

  publish-crates:
    name: Publish to crates.io
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: release-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Publish anvil-engine
        run: |
          cd crates/anvil-engine
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          echo "✅ Published anvil-engine v${{ needs.check-version.outputs.new_version }}"

      - name: Wait for crates.io indexing
        run: |
          echo "⏳ Waiting 60 seconds for crates.io to index anvil-engine..."
          sleep 60

      - name: Publish anvil-cli
        run: |
          cd crates/anvil-cli
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          echo "✅ Published anvil-cli v${{ needs.check-version.outputs.new_version }}"

  create-release:
    name: Create GitHub Release
    needs: [check-version, publish-crates]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="v${{ needs.check-version.outputs.new_version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Tag $VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag $VERSION does not exist, will create"
          fi

      - name: Generate changelog
        if: steps.check_tag.outputs.exists == 'false'
        id: changelog
        run: |
          VERSION="v${{ needs.check-version.outputs.new_version }}"
          
          # Get commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges | head -20)
          else
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Build changelog
          cat > release_notes.md << 'EOF'
          ## 📦 Installation
          
          ```bash
          cargo install anvil-cli --force
          ```
          
          Or download the binary for your platform from the assets below.
          
          ## 🎯 What's New
          
          EOF
          
          echo "$COMMITS" >> release_notes.md
          
          cat >> release_notes.md << 'EOF'
          
          ## 📚 Documentation
          
          - [Comprehensive Documentation](https://docs.useanvil.tech)
          
          ## ✅ Verification
          
          ```bash
          # Verify installation
          anvil --version
          
          # Create a test project
          anvil create test-app --template fullstack-saas
          ```
          EOF
          
          echo "✅ Generated release notes"

      - name: Create Git Tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="v${{ needs.check-version.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          echo "✅ Created and pushed tag $VERSION"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          name: anvil v${{ needs.check-version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    name: Build Release Binaries
    needs: [check-version, create-release]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: anvil
            asset_name: anvil-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: anvil
            asset_name: anvil-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: anvil
            asset_name: anvil-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: anvil.exe
            asset_name: anvil-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Rename artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        shell: bash

      - name: Upload binary to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          files: artifacts/${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}